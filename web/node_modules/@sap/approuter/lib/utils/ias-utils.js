'use strict';

const uaaUtils      = require('../utils/uaa-utils');
const urlUtils      = require('../utils/url-utils');
const _             = require('lodash');
const request       = require('./request-utils');
const NodeCache     = require('node-cache');
const zoneInfoCache = new NodeCache({stdTTL: 300, checkperiod: 320});

exports.getIasConfig        = getIasConfig;
exports.getIasCredentials   = getIasCredentials;
exports.getZoneInfo         = getZoneInfo;
exports.callZoneInfoAPI     = callZoneInfoAPI;

function getIasConfig(req, cb) {
  let iasOptions = req.extIasConfigOptions || req.routerConfig.iasConfig.options;
  if (req.app && req.app.approuter && req.app.approuter.resolveIasConfig) {
    req.app.approuter.resolveIasConfig(req, iasOptions, cb);
  } else {
    resolveIasConfig(req, iasOptions, cb);
  }
}

function resolveIasConfig(req, iasOptions, cb) {
  iasOptions = _.clone(iasOptions);
  let requestHost = urlUtils.getAppRouterHost(req);
  let tenantHostPattern = req.routerConfig.iasConfig.tenantHostPattern;
  if (!tenantHostPattern){
    cb (null,iasOptions);
  } else {
    let tenant = uaaUtils.retrieveTenantFromURL (requestHost, tenantHostPattern);
    if (!req.zoneInfo){
      return cb('Missing zone information. Check IAS configuration and trust. See KBA 3479740.');
    }
    iasOptions.tenant = tenant;
    cb(null, iasOptions);
  }
}

function getIasCredentials(req){
  return req && req.routerConfig && req.routerConfig.iasConfig && req.routerConfig.iasConfig.options.url ? req.routerConfig.iasConfig.options : null;
}

function getZoneInfo(tenant, iasConfig, uaadomain, logger, cb) {
  logger = logger && logger.getLogger && logger.getLogger('/ias-utils.js');
  let zoneInfo = null;
  if (!tenant){
    zoneInfo = {
      authenticationType   : 'ias',
      status               : 'ACTIVE',
      apptid               : iasConfig.zone_uuid || iasConfig.app_tid,
      authorizationEndpoint: iasConfig.authorization_endpoint,
      tokenEndpoint        : iasConfig.url + '/oauth2/token',
      endSessionEndpoint   : iasConfig.end_session_endpoint,
      userInfoEndpoint     : iasConfig.url + '/oauth2/userinfo'
    };
    return cb(null, zoneInfo);
  }
  const cachedZoneInfo = zoneInfoCache.get(tenant);
  if (cachedZoneInfo){
    logger.info('zoneInfo fetched from Cached zoneInfo');
    return cb(null,cachedZoneInfo);
  }

  if (!uaadomain && !iasConfig['btp-tenant-api']){
    return cb(new Error('Can not get zone info by subdomain, xsuaa domain or  bt-tenant-api missing'));
  }

  let iasClientId = iasConfig.clientid;
  if (iasConfig.iasOnly) {
    // in case only IAS is bound, no need to send the client id from the IAS service
    iasClientId = null;
  }

  return exports.callZoneInfoAPI(uaadomain, iasConfig['btp-tenant-api'], tenant, iasClientId, logger, cb);
}

function callZoneInfoAPI(uaadomain, btpTenantAPI, subdomain, iasClientId, logger, cb) {
  const validators = require('./../configuration/validators');

  // Build the base URL without query parameters
  const baseUrl = btpTenantAPI ? `${btpTenantAPI}/sap/rest/tenantLoginInfo/${subdomain}` : `https://api.${uaadomain}/sap/rest/tenantLoginInfo/${subdomain}`;

  // Add the iasClient query parameter only if iasClientId is not null
  const zoneInfoUrl = iasClientId !== null ? `${baseUrl}?iasClient=${iasClientId}` : baseUrl;

  request.get({url: zoneInfoUrl}, (err, res, body) => {
    if (err || res.statusCode !== 200) {
      return cb(new Error('Failed to call get Zone and IAS tenant ' + err + ' response status ' + res.statusCode));
    }
    try {
      const responseJSON = JSON.parse(body);
      let zoneInfo = {};
      if (responseJSON.status === 'ACTIVE' && responseJSON.authentication === 'ias') {
        validators.validateZoneInfo(responseJSON);

        zoneInfo = {
          authenticationType: responseJSON.authentication,
          status: responseJSON.status,
          apptid: responseJSON.zoneId || responseJSON.app_tid,
          authorizationEndpoint: responseJSON.authorization_endpoint,
          tokenEndpoint: responseJSON.token_endpoint,
          userInfoEndpoint: responseJSON.userinfo_endpoint,
          endSessionEndpoint: responseJSON.end_session_endpoint,
          oidcMetadata: responseJSON.oidc_metadata
        };
        logger && logger.info('zoneInfo fetched from xsuaa');
      } else {
        logger && logger.info(`IAS is not trusted for subdomain ${subdomain}. Please check Saas Registry/SMS subscriptions`);
      }
      zoneInfoCache.set(subdomain, zoneInfo);
      cb(null, zoneInfo);
    } catch (err) {
      return cb(new Error('Failed to parse get Zone and IAS tenant response ' + err.message));
    }
  });
}
