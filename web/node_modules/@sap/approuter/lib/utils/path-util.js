'use strict';

const url       = require('url');
const urijs     = require('urijs');
const querystring = require ('querystring');

module.exports = {
  isPublicPath: function (req) {
    let appConfig = req.routerConfig.appConfig;
    if (appConfig && appConfig.authenticationMethod === 'none' ||
      req.internalUrl && req.internalUrl.route.authenticationType === 'none') {
      return true;
    }

    return module.exports.getRequestPath(req) === appConfig.login.callbackEndpoint;
  },

  isCsrfProtectionEnabled: function (req) {
    return !(req.internalUrl && req.internalUrl.route && req.internalUrl.route.csrfProtection === false);
  },

  isStateProtectionEnabled: function (req) {
    const stateParameterSecret = req.routerConfig && req.routerConfig.stateParameterSecret;
    const excludedStateHandlingSubdomains = req.routerConfig && req.routerConfig.excludedStateHandlingSubdomains;
    if (excludedStateHandlingSubdomains) {
      const passportUtils = require ('../passport/utils');
      const tenant = passportUtils.getTenantInfo(req).tenant;
      if (excludedStateHandlingSubdomains.indexOf(tenant) > -1) {
        return false;
      }
    }
    const stateProtection = req.routerConfig && req.routerConfig.appConfig && req.routerConfig.appConfig.stateProtection;
    return !!(stateParameterSecret && (stateProtection !== false));
  },

  isBasicAuthProtectedPath: function (req) {
    return this.pathAuthenticationType(req) === 'basic';
  },

  pathAuthenticationType: function (req) {

    const routeAuthenticationType = req && req.internalUrl && req.internalUrl.route &&
        req.internalUrl.route.authenticationType && req.internalUrl.route.authenticationType.toLowerCase();

    let urlObj = req.url ? urijs.parse(req.url) : null;
    if (urlObj && req.routerConfig && req.routerConfig.appConfig && req.routerConfig.appConfig.login &&
        urlObj.path.indexOf(req.routerConfig.appConfig.login.callbackEndpoint) > -1 && urlObj.query){
      let loginCallbackAuthType = querystring.parse(urlObj.query).authType;
      if (loginCallbackAuthType){
        return loginCallbackAuthType;
      }
    }

    if (process.env.SAAS_APPROUTER  && req.zoneInfo && req.zoneInfo.authenticationType){
      return req.zoneInfo.authenticationType;
    }

    if (routeAuthenticationType) {
      return routeAuthenticationType;
    }
    if (req.zoneInfo){
      return req.zoneInfo.authenticationType;
    }

    if (req.extIasConfigOptions){
      return 'ias';
    }

    if (req.extUaaConfigOptions){
      return 'xsuaa';
    }

    if (isBoundToXsuaa(req) && !isBoundToIas(req) && !isIasDestination(req)){
      return 'xsuaa';
    }

    if (isBoundToXsuaa(req) && isIasDestination(req)){
      return 'ias';
    }

    if (!isBoundToXsuaa(req) && isBoundToIas(req) || isIasDestination(req)){
      return 'ias';
    }

    if (isBoundToXsuaa(req) && isBoundToIas(req)){
      return req.zoneInfo ? 'ias' : 'xsuaa';
    }
    return 'xsuaa';
  },

  getRequestPath: function (req) {
    if (req.internalUrl) {
      return req.internalUrl.pathname;
    }
    return url.parse(req.url).pathname;
  }
};

function isBoundToXsuaa(req){
  return req && req.routerConfig && req.routerConfig.uaaConfig && req.routerConfig.uaaConfig.options && req.routerConfig.uaaConfig.options.url;
}

function isBoundToIas(req){
  return req && req.routerConfig && req.routerConfig.iasConfig && req.routerConfig.iasConfig.options && req.routerConfig.iasConfig.options.url;
}

function isIasDestination(req){
  return req && req.destinationCredentials && req.destinationCredentials.ias;
}
