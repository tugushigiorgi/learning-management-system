'use strict';

const APPS_CACHE_SESSION_PREFIX = '{appsCacheSession}';
const MAX_CACHE_SIZE = 200 * 1024; // 200KB

module.exports.setAppsCache = async function(cacheKey, cacheValue, req){
  if (!isAppsCacheEnabled(req)) {return;}
  const tracer = req.loggingContext && req.loggingContext.getTracer(__filename);
  const cacheValueSize = cacheValue && JSON.stringify(cacheValue).length;
  if (cacheValueSize > MAX_CACHE_SIZE) {
    tracer && tracer.error(`Maximum cache value size of ${MAX_CACHE_SIZE} exceeded for cache key ${cacheKey}`);
    return;
  }
  const appCacheSession = {
    externalSessionId: cacheKey,
    externalSessionExpiration: getSessionExpiration(req),
    applications: cacheValue
  };
  tracer && tracer.debug(`Storing apps cache for cache key : ${cacheKey}`);
  await req.app.get('externalSessionStore').updateExternalSession(appCacheSession, APPS_CACHE_SESSION_PREFIX);
};

module.exports.getAppsCache = async function(cacheKey, req){
  if (!isAppsCacheEnabled(req)) {return;}
  const tracer = req.loggingContext && req.loggingContext.getTracer(__filename);
  const appCacheSession = await req.app.get('externalSessionStore').getExternalSession(cacheKey,null, APPS_CACHE_SESSION_PREFIX);
  if (appCacheSession && appCacheSession.applications){
    tracer && tracer.debug(`Retrieved apps cache for cache key : ${cacheKey}`);
    return appCacheSession.applications;
  }
  tracer && tracer.debug(`Apps cache not found for cache key : ${cacheKey}`);
  return null;
};

module.exports.deleteAppsCache = async function(cacheKey, req){
  if (!isAppsCacheEnabled(req)) {return;}
  const tracer = req.loggingContext && req.loggingContext.getTracer(__filename);
  tracer && tracer.debug(`Deleting apps cache for cache key : ${cacheKey}`);
  await req.app.get('externalSessionStore').destroyExternalSession(cacheKey, APPS_CACHE_SESSION_PREFIX);
};

function getSessionExpiration(req){
  const routerConfig = req.app.get('mainRouterConfig');
  const sessionLength = routerConfig.appsCacheExpiration;
  const tracer = req.loggingContext && req.loggingContext.getTracer(__filename);
  const appSessionExpiration = (Math.floor(Date.now() / 1000)) + sessionLength;
  tracer && tracer.debug(`Apps cache session expiration: ${appSessionExpiration}`);
  return appSessionExpiration;
}

function isAppsCacheEnabled(req){
  const routerConfig = req.app.get('mainRouterConfig');
  return routerConfig && routerConfig.appsCacheExpiration > 0;
}
