/* eslint-disable camelcase */
'use strict';
const request = require('./request-utils');
const headerUtils = require('./header-util');
const dynamicRoutingUtils = require('./dynamic-routing-utils');
const vcapUtils = require('./vcap-utils');
const tracer = require('./logger').getTracer(__filename);
const LOG_SESSION_PREFIX = '{logSession}';

let dynLogLevelCache = null;

module.exports.logRequestError = function(req, message) {
  if (req && req.logger && process.env.SAAS_APPROUTER) {
    req.logger.error(message);
  }
};

module.exports.logRequestWarning = function(options, message, inTracer) {
  if (options && options.logger && process.env.SAAS_APPROUTER) {
    options.logger.warn(message);
  } else {
    inTracer && inTracer.warning(message);
    !inTracer && tracer.warning(message);
  }
};

module.exports.logRequestInfo = function(options, message, inTracer) {
  if (options && options.logger && process.env.SAAS_APPROUTER) {
    options.logger.info(message);
  } else {
    inTracer && inTracer.info(message);
    !inTracer && tracer.info(message);
  }
};

module.exports.setDynamicLogLevel = async function(req, level){
  let logSessionLength = process.env.LOG_SESSION_LENGTH && parseInt(process.env.LOG_SESSION_LENGTH);
  if (Number.isNaN(logSessionLength)){
    const error = new Error('LOG_SESSION_LENGTH is not a number');
    error.status = 400;
    throw error;
  }
  logSessionLength = logSessionLength === undefined ? 1800 : logSessionLength;
  if (logSessionLength === 0){
    // If log session length is zero, dynamic log level setting is disabled
    throw new Error('Dynamic log level API is currently disabled by Portal administrator');
  }
  const externalSessionStore = req && req.app && req.app.get('externalSessionStore');
  if (externalSessionStore){
    const logSession = {
      externalSessionId: req.tenant,
      externalSessionExpiration: (Math.floor(Date.now() / 1000)) + logSessionLength,
      level: level
    };
    await externalSessionStore.updateExternalSession(logSession,LOG_SESSION_PREFIX);
  }
};

module.exports.unsetDynamicLogLevel = async function(req){
  const externalSessionStore = req && req.app && req.app.get('externalSessionStore');
  if (externalSessionStore){
    await externalSessionStore.destroyExternalSession(req.tenant,LOG_SESSION_PREFIX);
  }
};

module.exports.cacheDynamicLogLevel = function(app){
  if (process.env.SAAS_APPROUTER) {
    const FIVE_MINUTES = 5 * 60 * 1000;
    setInterval(async () => {
      dynLogLevelCache = {};
      const externalSessionStore = app.get('externalSessionStore');
      if (externalSessionStore) {
        const logSessions = await externalSessionStore.all(LOG_SESSION_PREFIX);
        logSessions.forEach((logSession) => {
          dynLogLevelCache[logSession.externalSessionId] = {
            level : logSession.level
          };
        });
      }
    }, FIVE_MINUTES);
  }
};

module.exports.getDynamicLogLevel = function(req){
  return dynLogLevelCache && req.tenant && dynLogLevelCache[req.tenant] && dynLogLevelCache[req.tenant]['level'];
};

module.exports.logRequestSetTenant = function(req, tenant) {
  if (req && req.logger) {
    req.logger.setTenantId(tenant);
    if (!req.logger.getCorrelationId()) {
      req.logger.setCorrelationId(headerUtils.getCorrelationId(req));
    }
    let dynamicLogLevel = module.exports.getDynamicLogLevel(req);
    if (dynamicLogLevel){
      req.logger.setLoggingLevel(dynamicLogLevel);
    }
  }
};

module.exports.getApplicationLogs = function(req, res) {
  return new Promise((resolve, reject) => {
    let requestOptions = module.exports.getOpenSearchRequestOptions(req);
    if (!requestOptions) {
      const err = new Error('Failed to get cls credentials');
      return reject(err);
    }
    module.exports.callApplicationLogsBackend(requestOptions, function(err, respBody) {
      if (err) {
        return reject(err);
      }
      const logs = [];
      if (respBody.hits) {
        respBody.hits.hits.forEach((hit) => {
          if (hit._source.msg && hit._source.msg !== '-') {
            logs.push({
              message: hit._source.msg,
              correlationId: hit._source.correlation_id,
              timestamp: hit._source['@timestamp'],
              level: hit._source.level
            });
          }
        });
      }
      res.setHeader('Content-Type', 'application/json');
      res.end(JSON.stringify(logs));
    });
  });
};

module.exports.callApplicationLogsBackend = function(requestOptions, cb) {
  request.get(requestOptions, function(err, response, body) {
    if (err || response.statusCode !== 200) {
      const error = new Error('Failed to execute query ' + requestOptions.body + ' response status ' +
          response.statusCode + ' ' + (body ? body : '') + err);
      return cb(error);
    }
    const respBody = JSON.parse(response.body);
    cb(null, respBody);
  });
};

function applicationLogsQuery(req) {
  const timeRange = 1440; // One day in minutes
  const timestampNow = new Date();
  const end = timestampNow.getTime();
  const start = end - timeRange * 60 * 1000;
  const timestampYesterday = new Date(timestampNow);
  const logLevel = module.exports.getDynamicLogLevel(req) || 'ERROR';
  timestampYesterday.setHours(timestampYesterday.getHours() - 24);
  let tenantKey;
  if (req.headers['x-application-key']){
    let applicationKey = dynamicRoutingUtils.getApplicationKey({url: '/' + req.headers['x-application-key']});
    tenantKey = applicationKey && applicationKey.appDestinationId ? req.tenant + '-' + applicationKey.appDestinationId + '.' + applicationKey.appPrefix + '.' + applicationKey.appNameWithoutPrefix :
      req.tenant + '-' + applicationKey.appPrefix + '.' + applicationKey.appNameWithoutPrefix;
  } else {
    tenantKey = req.tenant;
  }
  return applicationLogsDayQuery(timestampNow, start, end, tenantKey, logLevel);
}

module.exports.getOpenSearchRequestOptions = function(req) {
  let logger = req.logger;
  let clsCredentials = vcapUtils.getServiceCredentials({tag: 'Cloud Logging'});
  if (!clsCredentials) {
    clsCredentials = vcapUtils.getServiceCredentials({label: 'cloud-logging'});
  }
  if (!clsCredentials || !clsCredentials['backend-endpoint'] || !clsCredentials['backend-username'] || !clsCredentials['backend-password']) {
    logger && logger.error('Failed to get cls credentials');
    return null;
  }
  let requestOptions = {
    url: 'https://' + clsCredentials['backend-endpoint'] + '/logs-cfsyslog-*/_search',
    headers: {
      'Content-Type': 'application/json',
    },
    auth: {
      user: clsCredentials['backend-username'],
      pass: clsCredentials['backend-password']
    },
    body: applicationLogsQuery(req),
  };
  return requestOptions;
};

function applicationLogsDayQuery(timestampReferenceDay, startTime, endTime, tenant, logLevel) {

  const logsQuery = { // AppELK template
    'size': 10000,
    '_source': ['msg', '@timestamp', 'level', 'correlation_id'],
    'query': {
      'bool': {
        'must': [{
          'range': {
            '@timestamp': {
              'format': 'epoch_millis',
              'gte': startTime,
              'lte': endTime
            }
          }
        }, {
          'term': {
            'tenant_id.keyword': tenant
          }
        }
        ]
      }
    }
  };
  if (logLevel === 'ERROR') {
    logsQuery.query.bool.must.push({
      'match': {
        'level': logLevel
      }
    });
  }
  return JSON.stringify(logsQuery) + '\n';
}
